var wordpressApp=angular.module("wordpressApp",["ngRoute"]).config(function(e,t){t.html5Mode(!0),e.when("/",{controller:"PostsController",templateUrl:wpLocalized.views+"posts.html"}).when("/:postSlug",{controller:"postController",templateUrl:wpLocalized.views+"post.html"}).when("/:postSlug/:mediaSlug",{controller:"MediaController",templateUrl:wpLocalized.views+"media.html"}).otherwise({redirectTo:"/"})}).filter("toTrusted",["$sce",function(e){return function(t){return e.trustAsHtml(t)}}]);
var mediaService=function(e){this.getMediaSingle=function(i){return e.get("wp-json/media?filter[name]="+i)},this.getPostMedia=function(i){return e.get("wp-json/media?filter[post_parent]="+i)}};angular.module("wordpressApp").service("mediaService",mediaService);
!function(){var t=function(t){this.getPosts=function(){return t.get("wp-json/posts")},this.getPost=function(s){return t.get("wp-json/posts?filter[name]="+s)}};angular.module("wordpressApp").service("postsService",t)}();
var MediaController=function(e,o,r){var n=function(){i()},i=function(){r.getSingleMedia(o.mediaSlug).success(function(o){e.media=o[0]}).error(function(e,o){console.log(e+": "+o)})};n()};MediaController.$inject=["$scope","$routeParams","postsService"],wordpressApp.controller("MediaController",MediaController);
var postController=function(o,t,e,n){var r=function(){s()},s=function(){e.getPost(t.postSlug).success(function(t){o.post=t[0],c(o.post.ID)}).error(function(o,t){console.log(o+": "+t)})},c=function(t){n.getPostMedia(t).success(function(t){o.postMedia=t}).error(function(o,t){console.log(o+": "+t)})};r()};postController.$inject=["$scope","$routeParams","postsService","mediaService"],wordpressApp.controller("postController",postController);
var PostsController=function(o,s){var r=function(){s.getPosts().success(function(s){o.posts=s}).error(function(o,s){console.log(o+": "+s)})};r()};PostsController.$inject=["$scope","postsService"],wordpressApp.controller("PostsController",PostsController);
//# sourceMappingURL=data:application/json;base64,